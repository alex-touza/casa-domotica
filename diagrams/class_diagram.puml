@startuml
skinparam dpi 500
skinparam linetype ortho
'https://plantuml.com/class-diagram

set separator ::

abstract class CDPins::Pin{
    # const int pin
    + Pin(int _pin)
    + {abstract} void begin()
    + int value
}

class CDPins::EntradaDigital {
	+ void begin()
	+ int read()
	+ unsigned int pulseIn()
}

class CDPins::EntradaAnalògica {
	+ void begin()
	+ unsigned int read()
}

class CDPins::SortidaDigital {
	+ void begin()
	+ void on()
	+ void off()
	+ void on(unsigned long t)
	+ void off(unsigned long t)
	+ void set(int estat)
	+ void set(int estat, unsigned long t)
	+ int toggle()
	+ void pulseOut()
}

class CDPins::SortidaAnalògica {
	+ void begin()
	+ void set(int valor)
	+ void set(int valor, int min, int max)
}

together {
	struct Pos<T> {
    	T x
    	T y
    }

    enum Axis {
    	X
    	Y
    }

    class Joystick {
        - int deadzone
        - int* getPosPtr(Axis axis)
        - Pos<int> pos
        # EntradaAnalogica* pinX
        # EntradaAnalogica* pinY
        + Joystick(int _pinX, int _pinY, int deadzone)
        + bool read(Axis axis)
        + bool read()
        + Pos<unsigned long> lastChanged
        + const int* getPos(Axis axis)
    }
}

together {
	package FastLED <<rectangle>> #EEE {
		class FastLED <<extern>> {}
		hide FastLED members

		class CRGB <<extern>> {}
		hide FastLED members
	}


	class NeoPixel {
		+ void begin()
		+ void refresh()
		+ CRGB list[]
	}
}

package DHT <<rectangle>> #EEE {
	class DHT <<extern>> {}
	hide DHT members
}

class Range {
	- int size;
	- bool cycle
	- const int* range
	+ Range(const int _range[], int _size, bool _cycle)
	+ int getLevel(int n)
}

package LiquidCrystal_I2C <<rectangle>> #EEE {
	class LiquidCrystal_I2C <<extern>> {}
	hide LiquidCrystal_I2C members
}

class Pantalla {
	- unsigned long t
	- unsigned long maxT
	- TempHum* tempHum
	- int* tempSetting
	+ Pantalla(TempHum* _tempHum, int* _tempSetting)
	+ void begin()
	+ void update(string upperLine, string lowerLine)
    + void update(string upperLine, string lowerLine, unsigned long t)
    + void idle()
    + void checkTime()
}

class TempHum {
	- CRGB* ledTemp
	- CRGB* ledHum
	- {static} const int tempRange
	- {static} const int humRange
	- CRGB colors[]
	- Range* tempRange
	- Range* humRange
	# int pin
	+ TempHum(int _pin, CRGB* _ledTemp, CRGB* _ledHum)
	+ void begin()
	+ bool read()
	+ double temp
	+ double hum
}
note right of TempHum
S'hauria de dividir per a cada mesura
end note
EntradaAnalògica <|-- Pin
SortidaAnalògica <|-- Pin
EntradaDigital <|-up- Pin
SortidaDigital <|-- Pin

Joystick "2" *-- EntradaAnalògica
Joystick "2" *-- Pos
Joystick --- Axis

NeoPixel *-- FastLED::CRGB
NeoPixel --- FastLED::FastLED

Pantalla <|-- LiquidCrystal_I2C
Pantalla *-- TempHum

TempHum <|-- DHT
TempHum *-- Range
TempHum *-- CRGB

'hide NeoPixel members
'hide Pantalla members
'hide TempHum members
'hide Range members
'hide Joystick members
'hide EntradaDigital members
'hide SortidaDigital members
'hide EntradaAnalògica members
'hide SortidaAnalògica members
'hide Pin members
'hide Pos members
'hide Axis members

@enduml